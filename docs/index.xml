<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Visualization on My New Hugo Site</title>
    <link>/</link>
    <description>Recent content in Data Visualization on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Line plot for time series data</title>
      <link>/tutorials-4/line-plot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorials-4/line-plot/</guid>
      <description>pre code, pre, code { white-space: pre !important; overflow-x: scroll !important; word-break: keep-all !important; word-wrap: initial !important; }  Import data load(url(&amp;#39;https://github.com/MingChen0919/gst-colloquium-workshop-2018/raw/master/content/datasets/datasets.RData&amp;#39;))  Load libraries library(ggplot2) library(gridExtra)  Visualization Feature against frame index  Geom object: line  frame_index -&amp;gt; x feature -&amp;gt; y   # ggplot2 template p1 = ggplot(data = trajectory) + geom_line(mapping = aes(x = frame_index/1000, y = trajectory[, 2]), stat = &amp;quot;identity&amp;quot;, position = &amp;quot;identity&amp;quot;, color = &amp;#39;#ff6d6d&amp;#39;) + coord_cartesian() + facet_null() + #----map data values to visual values--- scale_x_continuous(name = &amp;quot;Frame index&amp;quot;) + scale_y_continuous(name = colnames(trajectory[2])) + theme_classic() p1  Distribution of feature values  Geom object: density  feature -&amp;gt; x   # ggplot2 template p2 = ggplot(data = trajectory) + geom_density(mapping = aes(x = trajectory[, 2]), stat = &amp;quot;density&amp;quot;, position = &amp;quot;identity&amp;quot;, color = &amp;#39;#3dbfff&amp;#39;) + coord_flip() + facet_null() + #----map data values to visual values--- scale_x_continuous(name = colnames(trajectory)[2]) + theme_classic() p2  Combine time series plot and density plot grid.</description>
    </item>
    
    <item>
      <title>Scatterplot for PCA data</title>
      <link>/tutorials-4/pca/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorials-4/pca/</guid>
      <description>pre code, pre, code { white-space: pre !important; overflow-x: scroll !important; word-break: keep-all !important; word-wrap: initial !important; }  Import data load(url(&amp;#39;https://github.com/MingChen0919/gst-colloquium-workshop-2018/raw/master/content/datasets/datasets.RData&amp;#39;))  Load libraries library(ggplot2)  Visualization Collective Variables and Macrostates  Geom object: point  TIC0 -&amp;gt; x TIC1 -&amp;gt; y macrostate -&amp;gt; color   ggplot(energy_tics) + geom_point(mapping = aes(x = TIC0, y = TIC1, color = as.factor(macrostate)), stat = &amp;quot;identity&amp;quot;, position = &amp;quot;identity&amp;quot;) + coord_cartesian() + facet_null() + #----map data values to visual values--- scale_x_continuous() + scale_y_continuous() + scale_color_identity() + theme() ggplot(energy_tics) + geom_point(mapping = aes(x = TIC0, y = TIC1, color = as.</description>
    </item>
    
    <item>
      <title>Network for graph-like data</title>
      <link>/tutorials-4/network/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/tutorials-4/network/</guid>
      <description>pre code, pre, code { white-space: pre !important; overflow-x: scroll !important; word-break: keep-all !important; word-wrap: initial !important; }  Import data transition = read.table(url(&amp;#39;https://raw.githubusercontent.com/MingChen0919/gst-colloquium-workshop-2018/master/content/datasets-2/John_datasets/transitionmatrix.dat&amp;#39;))  Load libraries library(ggnetwork) library(sna)  Simple network n = network(transition) n1 = ggnetwork(n) n1$x = n1$x[, 1] n1$y = n1$y[, 1] n1$xend = n1$xend[, 1] n1$yend = n1$yend[, 1] ggplot(n1, aes(x = x, y = y, xend = xend, yend = yend)) + geom_nodes() + geom_edges() + theme_blank()  Add attributes to vertices Assign an importance level to each vertex</description>
    </item>
    
  </channel>
</rss>