[
{
	"uri": "/tutorials-4/line-plot/",
	"title": "Line plot for time series data",
	"tags": [],
	"description": "",
	"content": " pre code, pre, code { white-space: pre !important; overflow-x: scroll !important; word-break: keep-all !important; word-wrap: initial !important; }  Import data load(url(\u0026#39;https://github.com/MingChen0919/gst-colloquium-workshop-2018/raw/master/content/datasets/datasets.RData\u0026#39;))  Load libraries library(ggplot2) library(gridExtra)  Visualization Feature against frame index  Geom object: line  frame_index -\u0026gt; x feature -\u0026gt; y   # ggplot2 template p1 = ggplot(data = trajectory) + geom_line(mapping = aes(x = frame_index/1000, y = trajectory[, 2]), stat = \u0026quot;identity\u0026quot;, position = \u0026quot;identity\u0026quot;, color = \u0026#39;#ff6d6d\u0026#39;) + coord_cartesian() + facet_null() + #----map data values to visual values--- scale_x_continuous(name = \u0026quot;Frame index\u0026quot;) + scale_y_continuous(name = colnames(trajectory[2])) + theme_classic() p1  Distribution of feature values  Geom object: density  feature -\u0026gt; x   # ggplot2 template p2 = ggplot(data = trajectory) + geom_density(mapping = aes(x = trajectory[, 2]), stat = \u0026quot;density\u0026quot;, position = \u0026quot;identity\u0026quot;, color = \u0026#39;#3dbfff\u0026#39;) + coord_flip() + facet_null() + #----map data values to visual values--- scale_x_continuous(name = colnames(trajectory)[2]) + theme_classic() p2  Combine time series plot and density plot grid.arrange(p1, p2, ncol = 2, widths = c(3,1)) # overwrite xlab on density plot. grid.arrange(p1, p2 + xlab(\u0026#39;\u0026#39;), ncol = 2, widths = c(3,1))   All features in one plots Define your own plotting functions\nline_plot = function(col_n) { p = ggplot(data = trajectory) + geom_line(mapping = aes(x = frame_index/1000, y = trajectory[, col_n]), stat = \u0026quot;identity\u0026quot;, position = \u0026quot;identity\u0026quot;, color = \u0026#39;#ff6d6d\u0026#39;) + coord_cartesian() + facet_null() + scale_x_continuous() + scale_y_continuous() + theme_classic() + theme(axis.title=element_text(size=5,face=\u0026quot;bold\u0026quot;)) + # helper functions xlab(\u0026#39;Frame Index\u0026#39;) + ylab(colnames(trajectory)[col_n]) return(p) } density_plot = function(col_n) { p = ggplot(data = trajectory) + geom_density(mapping = aes(x = trajectory[, col_n]), stat = \u0026quot;density\u0026quot;, position = \u0026quot;identity\u0026quot;, color = \u0026#39;#3dbfff\u0026#39;) + coord_flip() + facet_null() + scale_x_continuous() + theme_classic() + theme(axis.title=element_text(size=5,face=\u0026quot;bold\u0026quot;)) + # helper functions xlab(\u0026#39;\u0026#39;) return(p) } Examples\nline_plot(2) density_plot(4) Plots vector all_plots = list() for (i in 1:58) { # get column number col_n = (i + 1) %/% 2 + 1 cat(\u0026#39;The column number is: \u0026#39;, col_n, \u0026#39;\\n\u0026#39;) if (i %% 2 == 1) { cat(\u0026#39;i is an odd number: i = \u0026#39;, i, \u0026#39;\\n\u0026#39;) all_plots[[i]] = line_plot(col_n) } else { cat(\u0026#39;i is an even number: i = \u0026#39;, i, \u0026#39;\\n\u0026#39;) all_plots[[i]] = density_plot(col_n) } cat(\u0026#39;----------------------------------\\n\u0026#39;) } ## The column number is: 2 ## i is an odd number: i = 1 ## ---------------------------------- ## The column number is: 2 ## i is an even number: i = 2 ## ---------------------------------- ## The column number is: 3 ## i is an odd number: i = 3 ## ---------------------------------- ## The column number is: 3 ## i is an even number: i = 4 ## ---------------------------------- ## The column number is: 4 ## i is an odd number: i = 5 ## ---------------------------------- ## The column number is: 4 ## i is an even number: i = 6 ## ---------------------------------- ## The column number is: 5 ## i is an odd number: i = 7 ## ---------------------------------- ## The column number is: 5 ## i is an even number: i = 8 ## ---------------------------------- ## The column number is: 6 ## i is an odd number: i = 9 ## ---------------------------------- ## The column number is: 6 ## i is an even number: i = 10 ## ---------------------------------- ## The column number is: 7 ## i is an odd number: i = 11 ## ---------------------------------- ## The column number is: 7 ## i is an even number: i = 12 ## ---------------------------------- ## The column number is: 8 ## i is an odd number: i = 13 ## ---------------------------------- ## The column number is: 8 ## i is an even number: i = 14 ## ---------------------------------- ## The column number is: 9 ## i is an odd number: i = 15 ## ---------------------------------- ## The column number is: 9 ## i is an even number: i = 16 ## ---------------------------------- ## The column number is: 10 ## i is an odd number: i = 17 ## ---------------------------------- ## The column number is: 10 ## i is an even number: i = 18 ## ---------------------------------- ## The column number is: 11 ## i is an odd number: i = 19 ## ---------------------------------- ## The column number is: 11 ## i is an even number: i = 20 ## ---------------------------------- ## The column number is: 12 ## i is an odd number: i = 21 ## ---------------------------------- ## The column number is: 12 ## i is an even number: i = 22 ## ---------------------------------- ## The column number is: 13 ## i is an odd number: i = 23 ## ---------------------------------- ## The column number is: 13 ## i is an even number: i = 24 ## ---------------------------------- ## The column number is: 14 ## i is an odd number: i = 25 ## ---------------------------------- ## The column number is: 14 ## i is an even number: i = 26 ## ---------------------------------- ## The column number is: 15 ## i is an odd number: i = 27 ## ---------------------------------- ## The column number is: 15 ## i is an even number: i = 28 ## ---------------------------------- ## The column number is: 16 ## i is an odd number: i = 29 ## ---------------------------------- ## The column number is: 16 ## i is an even number: i = 30 ## ---------------------------------- ## The column number is: 17 ## i is an odd number: i = 31 ## ---------------------------------- ## The column number is: 17 ## i is an even number: i = 32 ## ---------------------------------- ## The column number is: 18 ## i is an odd number: i = 33 ## ---------------------------------- ## The column number is: 18 ## i is an even number: i = 34 ## ---------------------------------- ## The column number is: 19 ## i is an odd number: i = 35 ## ---------------------------------- ## The column number is: 19 ## i is an even number: i = 36 ## ---------------------------------- ## The column number is: 20 ## i is an odd number: i = 37 ## ---------------------------------- ## The column number is: 20 ## i is an even number: i = 38 ## ---------------------------------- ## The column number is: 21 ## i is an odd number: i = 39 ## ---------------------------------- ## The column number is: 21 ## i is an even number: i = 40 ## ---------------------------------- ## The column number is: 22 ## i is an odd number: i = 41 ## ---------------------------------- ## The column number is: 22 ## i is an even number: i = 42 ## ---------------------------------- ## The column number is: 23 ## i is an odd number: i = 43 ## ---------------------------------- ## The column number is: 23 ## i is an even number: i = 44 ## ---------------------------------- ## The column number is: 24 ## i is an odd number: i = 45 ## ---------------------------------- ## The column number is: 24 ## i is an even number: i = 46 ## ---------------------------------- ## The column number is: 25 ## i is an odd number: i = 47 ## ---------------------------------- ## The column number is: 25 ## i is an even number: i = 48 ## ---------------------------------- ## The column number is: 26 ## i is an odd number: i = 49 ## ---------------------------------- ## The column number is: 26 ## i is an even number: i = 50 ## ---------------------------------- ## The column number is: 27 ## i is an odd number: i = 51 ## ---------------------------------- ## The column number is: 27 ## i is an even number: i = 52 ## ---------------------------------- ## The column number is: 28 ## i is an odd number: i = 53 ## ---------------------------------- ## The column number is: 28 ## i is an even number: i = 54 ## ---------------------------------- ## The column number is: 29 ## i is an odd number: i = 55 ## ---------------------------------- ## The column number is: 29 ## i is an even number: i = 56 ## ---------------------------------- ## The column number is: 30 ## i is an odd number: i = 57 ## ---------------------------------- ## The column number is: 30 ## i is an even number: i = 58 ## ---------------------------------- all_plots$ncol = 6 all_plots$widths = c(5,2,5,2,5,2) do.call(grid.arrange, all_plots)   "
},
{
	"uri": "/rstudio-accounts-1/",
	"title": "RStudio Accounts",
	"tags": [],
	"description": "",
	"content": " pre code, pre, code { white-space: pre !important; overflow-x: scroll !important; word-break: keep-all !important; word-wrap: initial !important; }  Workshop Environment RStudio Server Account\nSelect an user account from this google sheet and put your name on the right to mark that this user account has been used.\nUse the upload button to upload local files to the Server.\nInstall packages (optional) You can use the code below to install R packages in the RStudio server.\ndir.create(\u0026#39;~/my-r-lib\u0026#39;) .libPaths(\u0026#39;~/my-r-lib\u0026#39;) install.packages(\u0026#39;ggplot2\u0026#39;)   Build Workshop Environment (admin users only) RStudio Docker on Jetstream Launch a Jetstream image with Docker installed on Jetstream. Then run the following to luanch an RStudio server.\nsudo su docker pull rocker/rstudio docker run --name=gst_dv -d -p 80:8787 rocker/rstudio   Create 30 new users # login to the rstudio container docker exec -it gst_dv bash # create users in the rstudio container for id in $(seq 1 30) do echo \u0026quot;gst_user_${id}:passwd_user_${id}::::/home/gst_user_${id}:\u0026quot; | newusers done   "
},
{
	"uri": "/datasets-2/",
	"title": "Datasets",
	"tags": [],
	"description": "",
	"content": " pre code, pre, code { white-space: pre !important; overflow-x: scroll !important; word-break: keep-all !important; word-wrap: initial !important; }  Dataset descriptions Time series plot datasets: trajectory  dimension: 5001 rows x 30 columns column 1: frame indices, from 1 to 5001. column 2-30: feature values from molecular simulation.  Below is the first few rows and columns of trajectory:\ntrajectory[1:10, 1:4] ## frame_index DIST: TRP 1 CA 3 - LEU 2 CA 27 DIST: TRP 1 CA 3 - ALA 3 CA 46 DIST: TRP 1 CA 3 - LEU 4 CA 56 ## 1 1 0.390 0.663 0.931 ## 2 2 0.391 0.676 0.946 ## 3 3 0.386 0.683 0.934 ## 4 4 0.389 0.648 1.001 ## 5 5 0.390 0.673 0.954 ## 6 6 0.377 0.702 0.862 ## 7 7 0.383 0.680 0.958 ## 8 8 0.391 0.654 0.937 ## 9 9 0.382 0.632 0.861 ## 10 10 0.392 0.704 0.918  PCA plot datasets: energy_tics This data is the dimension-reduced trajectory. We used a PCA-like method to analyze the feature trajectory, which tells us vectors (called collective variables, CVs) that explain the pattern of how all the feature values change. A good example for thinking about this would be that you have a protein with a large and slow open-close motion. The open/close motion should be the first CV, so this vector is the change in feature values when the protein opens and closes. Say the CV points in the ‘opening’ direction, then if the protein is closed the coordinate in this CV would be 0 or small. As you add more of the vector to the feature values, the coordinate would grow to open the protein. This way, we only need a single number for each frame to tell us how open or closed the protein is. Typically, 3-5 CVs will replace hundreds of feature values, since each CV encodes something that happens to all the features. In this case, the CV’s are called TICs. Then we cluster the frames in their CV coordinates into a big and a small groups called microstates and macrostates, respectively.\n dimension: 5001 rows x 8 columns column 1: frame indices, from 1 to 5001. column 2: energy column. It isa rough estimate of the protein’s internal energy in each frame. column 3-6: collective variables columns (CVs). column 7: microstates column 8: macrostates.  head(energy_tics) ## frame_index Energy TIC0 TIC1 TIC2 TIC3 macrostate ## 1 1 3.5432057 0.02972381 -0.52648097 -0.22878167 0.08876710 1 ## 2 2 6.3508859 0.66341269 -0.30123132 0.22007662 -0.30957389 1 ## 3 3 3.5261111 0.16165309 -0.16548754 -0.28634939 0.14749396 1 ## 4 4 0.0000000 -0.18048114 0.05328040 0.09536493 0.07265779 1 ## 5 5 8.2967958 1.47613239 -1.24254990 0.25970548 0.13562503 1 ## 6 6 0.7471867 0.02660624 0.06427059 0.27882308 -0.02626531 1   "
},
{
	"uri": "/tutorials-4/pca/",
	"title": "Scatterplot for PCA data",
	"tags": [],
	"description": "",
	"content": " pre code, pre, code { white-space: pre !important; overflow-x: scroll !important; word-break: keep-all !important; word-wrap: initial !important; }  Import data load(url(\u0026#39;https://github.com/MingChen0919/gst-colloquium-workshop-2018/raw/master/content/datasets/datasets.RData\u0026#39;))  Load libraries library(ggplot2)  Visualization Collective Variables and Macrostates  Geom object: point  TIC0 -\u0026gt; x TIC1 -\u0026gt; y macrostate -\u0026gt; color   ggplot(energy_tics) + geom_point(mapping = aes(x = TIC0, y = TIC1, color = as.factor(macrostate)), stat = \u0026quot;identity\u0026quot;, position = \u0026quot;identity\u0026quot;) + coord_cartesian() + facet_null() + #----map data values to visual values--- scale_x_continuous() + scale_y_continuous() + scale_color_identity() + theme() ggplot(energy_tics) + geom_point(mapping = aes(x = TIC0, y = TIC1, color = as.factor(macrostate)), stat = \u0026quot;identity\u0026quot;, position = \u0026quot;identity\u0026quot;) + coord_cartesian() + facet_null() + ##----map data values to visual values--- scale_x_continuous(name = \u0026quot;TIC-0\u0026quot;, breaks = c(-1, 0, 1, 2, 3, 4, 5, 6, 7), limits = c(-2, 10)) + scale_y_continuous(name = \u0026quot;TIC-1\u0026quot;, breaks = -6:3, trans = \u0026quot;reverse\u0026quot;) + scale_color_manual(values = c(\u0026quot;1\u0026quot; = \u0026quot;red\u0026quot;, \u0026quot;2\u0026quot; = \u0026quot;blue\u0026quot;, \u0026quot;3\u0026quot; = \u0026quot;yellow\u0026quot;, \u0026quot;4\u0026quot; = \u0026quot;green\u0026quot;), name = \u0026quot;Macrostate\u0026quot;, breaks = c(1,2,3), labels = c(\u0026#39;state 1\u0026#39;, \u0026#39;state 2\u0026#39;, \u0026#39;state 3\u0026#39;)) + theme_classic()  Collective Variables, macrostate and Energy  Geom object: point  TIC0 -\u0026gt; x TIC1 -\u0026gt; y macrostate -\u0026gt; shape Energy -\u0026gt; color   ggplot(energy_tics) + geom_point(mapping = aes(x = TIC0, y = TIC1, shape = as.factor(macrostate), color = Energy), stat = \u0026quot;identity\u0026quot;, position = \u0026quot;identity\u0026quot;) + coord_cartesian() + facet_null() + ##----map data values to visual values--- scale_x_continuous() + scale_y_continuous() + scale_color_gradient() + scale_shape_discrete() + theme() ggplot(energy_tics) + geom_point(mapping = aes(x = TIC0, y = TIC1, shape = as.factor(macrostate), color = Energy), stat = \u0026quot;identity\u0026quot;, position = \u0026quot;identity\u0026quot;) + coord_cartesian() + facet_null() + ##----map data values to visual values--- scale_x_continuous(name = \u0026quot;TIC-0\u0026quot;, breaks = -1:8) + scale_y_continuous(name = \u0026quot;TIC-1\u0026quot;, breaks = -6:3) + scale_color_gradient(low=\u0026quot;blue\u0026quot;, high=\u0026quot;red\u0026quot;, breaks = 0:8) + scale_shape_manual(values = c(\u0026quot;1\u0026quot; = 15, \u0026quot;2\u0026quot; = 17, \u0026quot;3\u0026quot; = 19, \u0026quot;4\u0026quot; = 22), name = \u0026quot;Macrostate\u0026quot;) + theme_classic()   Confidence ellipse  Geom object: point  TIC0 -\u0026gt; x TIC1 -\u0026gt; y macrostate -\u0026gt; shape Energy -\u0026gt; color  Geom object: path  TIC0 -\u0026gt; x TIC1 -\u0026gt; y macrostate -\u0026gt; color   ggplot(energy_tics) + geom_point(mapping = aes(x = TIC0, y = TIC1, color = Energy), stat = \u0026quot;identity\u0026quot;, position = \u0026quot;identity\u0026quot;, inherit.aes = FALSE) + geom_path(mapping = aes(x = TIC0, y = TIC1, color = as.factor(macrostate)), stat = \u0026quot;ellipse\u0026quot;, inherit.aes = FALSE) + coord_cartesian() + facet_null() + #----map data values to visual values--- scale_x_continuous(name = \u0026quot;TIC-0\u0026quot;, breaks = -1:8) + scale_y_continuous(name = \u0026quot;TIC-1\u0026quot;, breaks = -6:3) + scale_color_discrete() + theme_classic() ggplot(energy_tics) + geom_point(mapping = aes(x = TIC0, y = TIC1, fill = Energy, shape = as.factor(macrostate)), stat = \u0026quot;identity\u0026quot;, position = \u0026quot;identity\u0026quot;, inherit.aes = FALSE) + geom_path(mapping = aes(x = TIC0, y = TIC1, color = as.factor(macrostate)), stat = \u0026quot;ellipse\u0026quot;, inherit.aes = FALSE) + coord_cartesian() + facet_null() + #----map data values to visual values--- scale_x_continuous(name = \u0026quot;TIC-0\u0026quot;, breaks = -1:8) + scale_y_continuous(name = \u0026quot;TIC-1\u0026quot;, breaks = -6:3) + scale_shape_manual(values = c(\u0026quot;1\u0026quot; = 22, \u0026quot;2\u0026quot; = 24, \u0026quot;3\u0026quot; = 23, \u0026quot;4\u0026quot; = 25)) + scale_fill_gradient(low = \u0026quot;blue\u0026quot;, high = \u0026quot;red\u0026quot;) + scale_color_discrete() + theme_classic()  "
},
{
	"uri": "/ggplot2-framework-3/",
	"title": "ggplot2",
	"tags": [],
	"description": "",
	"content": " pre code, pre, code { white-space: pre !important; overflow-x: scroll !important; word-break: keep-all !important; word-wrap: initial !important; }  ggplot2 graph template ggplot(data = \u0026lt;DATA\u0026gt;) + \u0026lt;GEOM_FUNCTION\u0026gt;(mapping = aes(\u0026lt;MAPPINGS\u0026gt;), stat = \u0026lt;STAT\u0026gt;, position = \u0026lt;POSITION\u0026gt;) + \u0026lt;COORDINATE_FUNCTION\u0026gt; + \u0026lt;FACET_FUNCTION\u0026gt; + \u0026lt;SCALE_FUNCTION\u0026gt; + \u0026lt;THEME_FUNCTION\u0026gt;  GEOM_FUNCTION: use a geometric object to represent your data.  MAPPINGS: associate data values with visual values. e.g., categorial data -\u0026gt; different colors. STAT: use raw data values or calculate new values from raw values. POSITION: adjust overlapped geometric objects.  COORDINATE_FUNCTION: type of coordinate systems. FACET_FUNCTION: divide plots into subplots SCALE_FUNCTION: how data values are mapped to visual values. THEME_FUNCTION: the apperance of graph components that is not directly related to the mappings.   "
},
{
	"uri": "/tutorials-4/",
	"title": "Data Visualization",
	"tags": [],
	"description": "",
	"content": " pre code, pre, code { white-space: pre !important; overflow-x: scroll !important; word-break: keep-all !important; word-wrap: initial !important; }  "
},
{
	"uri": "/tutorials-4/cluster_analysis_basic/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Import and parse data library(tidyr) data_path \u0026lt;- '../datasets/john_datasets/traj_0.dat' feature_names = stringr::str_split(readLines(data_path)[1], '--')[[1]] # feature names have space and special characters. These characters are not good for variable names. # let's encode feature names names(feature_names) = paste0('V_', 1:length(feature_names)) data_raw = read.table(data_path, header = FALSE, sep = ' ', comment.char = 'D', stringsAsFactors = FALSE) colnames(data_raw) = names(feature_names) str(data_raw) ## 'data.frame': 5001 obs. of 29 variables: ## $ V_1 : num 0.39 0.391 0.386 0.389 0.39 0.377 0.383 0.391 0.382 0.392 ... ## $ V_2 : num 0.663 0.676 0.683 0.648 0.673 0.702 0.68 0.654 0.632 0.704 ... ## $ V_3 : num 0.931 0.946 0.934 1.001 0.954 ... ## $ V_4 : num 0.854 0.853 0.798 1.158 0.982 ... ## $ V_5 : num 0.373 0.387 0.385 0.374 0.389 0.39 0.386 0.387 0.369 0.381 ... ## $ V_6 : num 0.568 0.583 0.573 0.653 0.579 0.559 0.6 0.568 0.55 0.574 ... ## $ V_7 : num 0.583 0.585 0.54 0.77 0.664 0.563 0.595 0.562 0.541 0.6 ... ## $ V_8 : num 0.392 0.376 0.392 0.382 0.381 0.377 0.383 0.39 0.375 0.386 ... ## $ V_9 : num 0.565 0.533 0.556 0.672 0.543 0.549 0.555 0.569 0.557 0.573 ... ## $ V_10: num 0.375 0.394 0.393 0.386 0.382 0.39 0.386 0.381 0.385 0.376 ... ## $ V_11: num 0.146 0.372 0.03 0.452 -0.282 -0.629 0.189 -0.073 0.001 -0.428 ... ## $ V_12: num -0.989 -0.928 -1 -0.892 -0.959 -0.777 -0.982 -0.997 -1 -0.904 ... ## $ V_13: num 0.663 -0.543 -0.125 0.281 -0.972 0.34 0.032 0.444 0.542 0.046 ... ## $ V_14: num -0.749 -0.84 -0.992 -0.96 0.234 -0.941 -0.999 -0.896 -0.84 -0.999 ... ## $ V_15: num 0.202 -0.191 0.392 -0.356 0.063 0.188 -0.247 0.549 0.207 0.304 ... ## $ V_16: num -0.979 -0.982 -0.92 -0.935 -0.998 -0.982 -0.969 -0.836 -0.978 -0.953 ... ## $ V_17: num -0.752 -0.81 -0.676 -0.726 -0.554 -0.947 -0.885 -0.342 -0.775 -0.893 ... ## $ V_18: num 0.659 0.586 0.737 0.687 0.832 0.322 0.465 0.94 0.631 0.451 ... ## $ V_19: num 0.143 -0.067 0.101 -0.448 0.422 0.199 -0.332 0.233 -0.083 0.318 ... ## $ V_20: num -0.99 -0.998 -0.995 -0.894 -0.907 -0.98 -0.943 -0.973 -0.997 -0.948 ... ## $ V_21: num 0.901 0.977 0.871 0.012 0.984 0.963 0.99 0.812 0.967 0.843 ... ## $ V_22: num -0.434 -0.213 -0.491 -1 -0.176 -0.269 -0.141 -0.583 -0.255 -0.538 ... ## $ V_23: num 0.239 0.451 0.094 0.463 0.137 0.633 -0.017 0.324 -0.027 0.135 ... ## $ V_24: num -0.971 -0.893 -0.996 -0.887 -0.991 -0.774 -1 -0.946 -1 -0.991 ... ## $ V_25: num 0.962 0.996 0.988 -0.652 0.818 0.873 0.996 0.869 0.997 0.982 ... ## $ V_26: num -0.272 0.091 -0.152 0.758 -0.575 -0.487 0.084 -0.495 0.076 -0.19 ... ## $ V_27: num 0.659 0.66 0.68 0.668 0.641 0.65 0.659 0.639 0.65 0.685 ... ## $ V_28: num 0.629 0.426 0.436 0.946 0.407 0.388 0.581 0.684 0.49 0.4 ... ## $ V_29: num 0.414 0.367 0.336 0.39 0.382 0.345 0.419 0.327 0.305 0.351 ... # add frame index data_raw$frame_index = 1:nrow(data_raw)  Cluster data #Set frame index as row names rownames(data_raw) \u0026lt;- data_raw$frame_index data_raw$frame_index \u0026lt;- NULL #ensure NA values omitted data_clean \u0026lt;- na.omit(data_raw) #K-means cluster analysis using 5 clusters fit \u0026lt;- kmeans(data_clean,5) #get cluster means aggregate(data_clean, by=list(fit$cluster), FUN=mean) ## Group.1 V_1 V_2 V_3 V_4 V_5 V_6 ## 1 1 0.3862348 0.5592769 0.5748100 0.6973926 0.3835960 0.5626535 ## 2 2 0.3864857 0.5678057 0.8016000 0.9851200 0.3842000 0.6134457 ## 3 3 0.3865253 0.5560662 0.5439531 0.6531682 0.3836820 0.5575487 ## 4 4 0.3870317 0.5752425 0.5751743 0.6832726 0.3841506 0.5618320 ## 5 5 0.3862538 0.6787672 0.9178263 0.8797462 0.3833511 0.5726985 ## V_7 V_8 V_9 V_10 V_11 V_12 ## 1 0.5788722 0.3840656 0.5719552 0.3841920 0.2337157 -0.8667144 ## 2 0.8777257 0.3838743 0.5846571 0.3837943 -0.0057200 -0.9398400 ## 3 0.5555110 0.3846131 0.5708332 0.3839903 0.3491769 -0.9049453 ## 4 0.5696260 0.3843978 0.5705816 0.3845024 0.3067195 -0.9110634 ## 5 0.6291202 0.3842538 0.5725305 0.3836851 -0.1884389 -0.7712672 ## V_13 V_14 V_15 V_16 V_17 V_18 ## 1 0.45324682 -0.8136134 0.05256054 -0.9333478 0.8752174 -0.3384883 ## 2 -0.52488000 -0.2704171 0.16125143 0.3471543 0.9050629 -0.2114457 ## 3 0.43790717 -0.8298051 0.28521921 -0.9254306 0.8220363 -0.5103837 ## 4 -0.86560856 -0.0559065 0.18861331 -0.9371109 0.8281601 -0.4813756 ## 5 0.02844466 -0.7456050 0.11597519 -0.9269046 -0.7416546 0.5897328 ## V_19 V_20 V_21 V_22 V_23 V_24 ## 1 -0.16211237 -0.9545151 0.9189023 -0.2297124 0.1642268 -0.9463264 ## 2 0.14760000 -0.9320000 0.1892971 0.5537771 0.1010114 -0.9567886 ## 3 0.28400092 -0.9420368 0.8084044 -0.5374403 0.1827247 -0.9359674 ## 4 0.05383043 -0.9520143 0.8765832 -0.3730254 0.1732219 -0.9369049 ## 5 0.10945229 -0.9434771 0.8145477 -0.2727290 0.1625840 -0.9381603 ## V_25 V_26 V_27 V_28 V_29 ## 1 0.8851866 -0.1011906 0.3592321 0.3921933 0.3933712 ## 2 0.5498514 -0.2002400 0.4865429 0.5589543 0.6348057 ## 3 0.7591471 -0.6208465 0.3459968 0.3412895 0.3595322 ## 4 0.8337607 -0.3441680 0.3544802 0.3696593 0.3716466 ## 5 0.7642844 -0.2324141 0.6447195 0.5275057 0.3987672 #append cluster assignment data_kmean \u0026lt;- data.frame(data_clean, fit$cluster) #cluster plot library(cluster) clusplot(data_clean, fit$cluster, color=TRUE, shade=TRUE, labels=5, lines=0) #centroid plot against 1st 2 discriminant functions library(fpc) ## Warning: package 'fpc' was built under R version 3.3.3  plotcluster(data_clean, fit$cluster)  "
},
{
	"uri": "/tutorials-4/heatmap/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Import and parse data library(tidyr) library(ggplot2) ## Warning: package 'ggplot2' was built under R version 3.3.3 library(reshape2) ## ## Attaching package: 'reshape2' ## The following object is masked from 'package:tidyr': ## ## smiths data_path \u0026lt;- '../datasets/john_datasets/traj_0.dat' feature_names = stringr::str_split(readLines(data_path)[1], '--')[[1]] # feature names have space and special characters. These characters are not good for variable names. # let's encode feature names names(feature_names) = paste0('V_', 1:length(feature_names)) data_raw = read.table(data_path, header = FALSE, sep = ' ', comment.char = 'D', stringsAsFactors = FALSE) colnames(data_raw) = names(feature_names) str(data_raw) ## 'data.frame': 5001 obs. of 29 variables: ## $ V_1 : num 0.39 0.391 0.386 0.389 0.39 0.377 0.383 0.391 0.382 0.392 ... ## $ V_2 : num 0.663 0.676 0.683 0.648 0.673 0.702 0.68 0.654 0.632 0.704 ... ## $ V_3 : num 0.931 0.946 0.934 1.001 0.954 ... ## $ V_4 : num 0.854 0.853 0.798 1.158 0.982 ... ## $ V_5 : num 0.373 0.387 0.385 0.374 0.389 0.39 0.386 0.387 0.369 0.381 ... ## $ V_6 : num 0.568 0.583 0.573 0.653 0.579 0.559 0.6 0.568 0.55 0.574 ... ## $ V_7 : num 0.583 0.585 0.54 0.77 0.664 0.563 0.595 0.562 0.541 0.6 ... ## $ V_8 : num 0.392 0.376 0.392 0.382 0.381 0.377 0.383 0.39 0.375 0.386 ... ## $ V_9 : num 0.565 0.533 0.556 0.672 0.543 0.549 0.555 0.569 0.557 0.573 ... ## $ V_10: num 0.375 0.394 0.393 0.386 0.382 0.39 0.386 0.381 0.385 0.376 ... ## $ V_11: num 0.146 0.372 0.03 0.452 -0.282 -0.629 0.189 -0.073 0.001 -0.428 ... ## $ V_12: num -0.989 -0.928 -1 -0.892 -0.959 -0.777 -0.982 -0.997 -1 -0.904 ... ## $ V_13: num 0.663 -0.543 -0.125 0.281 -0.972 0.34 0.032 0.444 0.542 0.046 ... ## $ V_14: num -0.749 -0.84 -0.992 -0.96 0.234 -0.941 -0.999 -0.896 -0.84 -0.999 ... ## $ V_15: num 0.202 -0.191 0.392 -0.356 0.063 0.188 -0.247 0.549 0.207 0.304 ... ## $ V_16: num -0.979 -0.982 -0.92 -0.935 -0.998 -0.982 -0.969 -0.836 -0.978 -0.953 ... ## $ V_17: num -0.752 -0.81 -0.676 -0.726 -0.554 -0.947 -0.885 -0.342 -0.775 -0.893 ... ## $ V_18: num 0.659 0.586 0.737 0.687 0.832 0.322 0.465 0.94 0.631 0.451 ... ## $ V_19: num 0.143 -0.067 0.101 -0.448 0.422 0.199 -0.332 0.233 -0.083 0.318 ... ## $ V_20: num -0.99 -0.998 -0.995 -0.894 -0.907 -0.98 -0.943 -0.973 -0.997 -0.948 ... ## $ V_21: num 0.901 0.977 0.871 0.012 0.984 0.963 0.99 0.812 0.967 0.843 ... ## $ V_22: num -0.434 -0.213 -0.491 -1 -0.176 -0.269 -0.141 -0.583 -0.255 -0.538 ... ## $ V_23: num 0.239 0.451 0.094 0.463 0.137 0.633 -0.017 0.324 -0.027 0.135 ... ## $ V_24: num -0.971 -0.893 -0.996 -0.887 -0.991 -0.774 -1 -0.946 -1 -0.991 ... ## $ V_25: num 0.962 0.996 0.988 -0.652 0.818 0.873 0.996 0.869 0.997 0.982 ... ## $ V_26: num -0.272 0.091 -0.152 0.758 -0.575 -0.487 0.084 -0.495 0.076 -0.19 ... ## $ V_27: num 0.659 0.66 0.68 0.668 0.641 0.65 0.659 0.639 0.65 0.685 ... ## $ V_28: num 0.629 0.426 0.436 0.946 0.407 0.388 0.581 0.684 0.49 0.4 ... ## $ V_29: num 0.414 0.367 0.336 0.39 0.382 0.345 0.419 0.327 0.305 0.351 ... # add frame index data_raw$frame_index = 1:nrow(data_raw)  Cluster data #Set frame index as row names rownames(data_raw) \u0026lt;- data_raw$frame_index data_raw$frame_index \u0026lt;- NULL #ensure NA values omitted data_clean \u0026lt;- na.omit(data_raw) #K-means cluster analysis using 5 clusters fit \u0026lt;- kmeans(data_clean,5) #get cluster means aggregate(data_clean, by=list(fit$cluster), FUN=mean) ## Group.1 V_1 V_2 V_3 V_4 V_5 V_6 ## 1 1 0.3864216 0.5795147 0.8200392 1.0091324 0.3839853 0.6232941 ## 2 2 0.3861668 0.5584778 0.5629884 0.6852939 0.3835578 0.5617977 ## 3 3 0.3866490 0.6219201 0.7275961 0.7663591 0.3837926 0.5645153 ## 4 4 0.3888116 0.5847391 0.8511449 0.9336377 0.3842899 0.5783768 ## 5 5 0.3865188 0.5558796 0.5425049 0.6517113 0.3837001 0.5571901 ## V_7 V_8 V_9 V_10 V_11 V_12 ## 1 0.8851863 0.3836667 0.5871225 0.3836716 -0.01580882 -0.9302206 ## 2 0.5762502 0.3840882 0.5716206 0.3842392 0.23544224 -0.9258578 ## 3 0.5906804 0.3843402 0.5706849 0.3840978 0.06433124 -0.8665171 ## 4 0.6110870 0.3852754 0.5739130 0.3830870 0.49524638 0.8513478 ## 5 0.5546657 0.3845886 0.5709749 0.3840246 0.35143980 -0.9100623 ## V_13 V_14 V_15 V_16 V_17 V_18 ## 1 -0.44979902 -0.3360882 0.10500000 0.1877500 0.7237843 -0.132308824 ## 2 0.47783185 -0.8055455 0.05460219 -0.9326247 0.8782611 -0.380066302 ## 3 -0.46816786 -0.3559785 0.16273429 -0.9371023 0.1319937 0.002055655 ## 4 0.01904348 -0.9288406 0.02342029 -0.9450290 0.6060145 0.598710145 ## 5 0.42782799 -0.8310460 0.28963970 -0.9251915 0.8220014 -0.515545793 ## V_19 V_20 V_21 V_22 V_23 V_24 ## 1 0.12638235 -0.9301716 0.04590686 0.5400441 0.11262745 -0.9546569 ## 2 -0.16006083 -0.9561839 0.92619207 -0.2316077 0.16704443 -0.9457710 ## 3 0.07880969 -0.9491490 0.88440485 -0.3424650 0.17067594 -0.9376670 ## 4 -0.01402899 -0.9165507 0.80071014 -0.2684638 0.09227536 -0.9424058 ## 5 0.28560623 -0.9418080 0.80941934 -0.5418712 0.18198047 -0.9361432 ## V_25 V_26 V_27 V_28 V_29 ## 1 0.5274216 -0.1871667 0.5077794 0.6008382 0.6392010 ## 2 0.8907437 -0.1103589 0.3553199 0.3818366 0.3913014 ## 3 0.8122837 -0.2939417 0.4859794 0.4350341 0.3789219 ## 4 0.7394348 -0.1607391 0.4262899 0.5845217 0.4143478 ## 5 0.7584440 -0.6220642 0.3451330 0.3395174 0.3586267 #append cluster assignment and id data_kmean \u0026lt;- cbind(data_clean, id=seq(nrow(data_clean)), cluster=fit$cluster) #add id sort to order id numbers by cluster data_kmean$idsort \u0026lt;- data_kmean$id[order(data_kmean$cluster)] data_kmean$ idsort \u0026lt;- order(data_kmean$idsort) #reshape2:: melt to make data.frame in long format data_long \u0026lt;- melt(data_kmean, id.vars=c(\u0026quot;id\u0026quot;, \u0026quot;idsort\u0026quot;)) #plot heatmap ggplot(data_long, aes(x=variable, y=idsort)) + geom_tile(aes(fill=value))  #Hierarchical heatmap #Convert clean data to matrix data_matrix \u0026lt;- as.matrix(data_clean) #plot heatmap heatmap(data_matrix)  "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tutorials-4/cluster_analysis_basic/",
	"title": "Cluster Tutorial",
	"tags": [],
	"description": "",
	"content": "Import and parse data library(tidyr) data_path \u0026lt;- \u0026#39;../datasets/john_datasets/traj_0.dat\u0026#39; feature_names = stringr::str_split(readLines(data_path)[1], \u0026#39;--\u0026#39;)[[1]] # feature names have space and special characters. These characters are not good for variable names. # let\u0026#39;s encode feature names names(feature_names) = paste0(\u0026#39;V_\u0026#39;, 1:length(feature_names)) data_raw = read.table(data_path, header = FALSE, sep = \u0026#39; \u0026#39;, comment.char = \u0026#39;D\u0026#39;, stringsAsFactors = FALSE) colnames(data_raw) = names(feature_names) str(data_raw) ## \u0026#39;data.frame\u0026#39;: 5001 obs. of 29 variables: ## $ V_1 : num 0.39 0.391 0.386 0.389 0.39 0.377 0.383 0.391 0.382 0.392 ... ## $ V_2 : num 0.663 0.676 0.683 0.648 0.673 0.702 0.68 0.654 0.632 0.704 ... ## $ V_3 : num 0.931 0.946 0.934 1.001 0.954 ... ## $ V_4 : num 0.854 0.853 0.798 1.158 0.982 ... ## $ V_5 : num 0.373 0.387 0.385 0.374 0.389 0.39 0.386 0.387 0.369 0.381 ... ## $ V_6 : num 0.568 0.583 0.573 0.653 0.579 0.559 0.6 0.568 0.55 0.574 ... ## $ V_7 : num 0.583 0.585 0.54 0.77 0.664 0.563 0.595 0.562 0.541 0.6 ... ## $ V_8 : num 0.392 0.376 0.392 0.382 0.381 0.377 0.383 0.39 0.375 0.386 ... ## $ V_9 : num 0.565 0.533 0.556 0.672 0.543 0.549 0.555 0.569 0.557 0.573 ... ## $ V_10: num 0.375 0.394 0.393 0.386 0.382 0.39 0.386 0.381 0.385 0.376 ... ## $ V_11: num 0.146 0.372 0.03 0.452 -0.282 -0.629 0.189 -0.073 0.001 -0.428 ... ## $ V_12: num -0.989 -0.928 -1 -0.892 -0.959 -0.777 -0.982 -0.997 -1 -0.904 ... ## $ V_13: num 0.663 -0.543 -0.125 0.281 -0.972 0.34 0.032 0.444 0.542 0.046 ... ## $ V_14: num -0.749 -0.84 -0.992 -0.96 0.234 -0.941 -0.999 -0.896 -0.84 -0.999 ... ## $ V_15: num 0.202 -0.191 0.392 -0.356 0.063 0.188 -0.247 0.549 0.207 0.304 ... ## $ V_16: num -0.979 -0.982 -0.92 -0.935 -0.998 -0.982 -0.969 -0.836 -0.978 -0.953 ... ## $ V_17: num -0.752 -0.81 -0.676 -0.726 -0.554 -0.947 -0.885 -0.342 -0.775 -0.893 ... ## $ V_18: num 0.659 0.586 0.737 0.687 0.832 0.322 0.465 0.94 0.631 0.451 ... ## $ V_19: num 0.143 -0.067 0.101 -0.448 0.422 0.199 -0.332 0.233 -0.083 0.318 ... ## $ V_20: num -0.99 -0.998 -0.995 -0.894 -0.907 -0.98 -0.943 -0.973 -0.997 -0.948 ... ## $ V_21: num 0.901 0.977 0.871 0.012 0.984 0.963 0.99 0.812 0.967 0.843 ... ## $ V_22: num -0.434 -0.213 -0.491 -1 -0.176 -0.269 -0.141 -0.583 -0.255 -0.538 ... ## $ V_23: num 0.239 0.451 0.094 0.463 0.137 0.633 -0.017 0.324 -0.027 0.135 ... ## $ V_24: num -0.971 -0.893 -0.996 -0.887 -0.991 -0.774 -1 -0.946 -1 -0.991 ... ## $ V_25: num 0.962 0.996 0.988 -0.652 0.818 0.873 0.996 0.869 0.997 0.982 ... ## $ V_26: num -0.272 0.091 -0.152 0.758 -0.575 -0.487 0.084 -0.495 0.076 -0.19 ... ## $ V_27: num 0.659 0.66 0.68 0.668 0.641 0.65 0.659 0.639 0.65 0.685 ... ## $ V_28: num 0.629 0.426 0.436 0.946 0.407 0.388 0.581 0.684 0.49 0.4 ... ## $ V_29: num 0.414 0.367 0.336 0.39 0.382 0.345 0.419 0.327 0.305 0.351 ... # add frame index data_raw$frame_index = 1:nrow(data_raw)  Cluster data #Set frame index as row names rownames(data_raw) \u0026lt;- data_raw$frame_index data_raw$frame_index \u0026lt;- NULL #ensure NA values omitted data_clean \u0026lt;- na.omit(data_raw) #K-means cluster analysis using 5 clusters fit \u0026lt;- kmeans(data_clean,5) #get cluster means aggregate(data_clean, by=list(fit$cluster), FUN=mean) ## Group.1 V_1 V_2 V_3 V_4 V_5 V_6 ## 1 1 0.3862190 0.6786038 0.9177829 0.8796571 0.3833486 0.5729219 ## 2 2 0.3862412 0.5591859 0.5787555 0.7032032 0.3836063 0.5651692 ## 3 3 0.3864077 0.5677077 0.8121385 0.9985923 0.3842000 0.5862385 ## 4 4 0.3865218 0.5562464 0.5444314 0.6530977 0.3836895 0.5575914 ## 5 5 0.3870620 0.5751752 0.5787039 0.6890915 0.3841302 0.5648698 ## V_7 V_8 V_9 V_10 V_11 V_12 ## 1 0.6294286 0.3842457 0.5724286 0.3836743 -0.18981905 -0.7705752 ## 2 0.5863544 0.3840893 0.5723431 0.3841646 0.22555496 -0.8680020 ## 3 0.8648308 0.3834923 0.5864308 0.3840615 -0.02088462 -0.9419769 ## 4 0.5553123 0.3845982 0.5708059 0.3839941 0.34978227 -0.9048086 ## 5 0.5770822 0.3844357 0.5704543 0.3844822 0.30589457 -0.9115302 ## V_13 V_14 V_15 V_16 V_17 V_18 ## 1 0.02742667 -0.74582667 0.11602476 -0.9270248 -0.7385143 0.5894133 ## 2 0.45111592 -0.81389940 0.04065157 -0.9296869 0.8771746 -0.3311446 ## 3 -0.65593846 -0.11573846 0.31730000 0.7286385 0.9161615 -0.1889231 ## 4 0.43632773 -0.83071273 0.28700818 -0.9251495 0.8217905 -0.5111027 ## 5 -0.86640465 -0.06119225 0.17460775 -0.9342651 0.8272403 -0.4833705 ## V_19 V_20 V_21 V_22 V_23 V_24 ## 1 0.10976762 -0.9435124 0.8111029 -0.2724133 0.16265524 -0.9382400 ## 2 -0.15928448 -0.9532365 0.8883964 -0.2123937 0.16258827 -0.9467582 ## 3 0.17767692 -0.9357077 0.5182154 0.5895846 0.09267692 -0.9572615 ## 4 0.27981636 -0.9423836 0.8079964 -0.5367095 0.18260500 -0.9359691 ## 5 0.05510388 -0.9519953 0.8397659 -0.3540047 0.17377364 -0.9370667 ## V_25 V_26 V_27 V_28 V_29 ## 1 0.7644210 -0.23301714 0.6448590 0.5275429 0.3990686 ## 2 0.8763165 -0.09823451 0.3641153 0.3990000 0.3994517 ## 3 0.5244538 -0.21440769 0.4508154 0.5262308 0.6245923 ## 4 0.7612914 -0.61678591 0.3460318 0.3412000 0.3594400 ## 5 0.8346946 -0.34364806 0.3591194 0.3744977 0.3781907 #append cluster assignment data_kmean \u0026lt;- data.frame(data_clean, fit$cluster) #cluster plot library(cluster) clusplot(data_clean, fit$cluster, color=TRUE, shade=TRUE, labels=5, lines=0) #centroid plot against 1st 2 discriminant functions library(fpc) plotcluster(data_clean, fit$cluster)  "
},
{
	"uri": "/",
	"title": "Data Visualization",
	"tags": [],
	"description": "",
	"content": "GST Data Visualization Team  Amanda Devolk Karthik Varanasi Jennifer Bourn Jiali Yu John Ossyra Ming Chen Pawat Pattarawat Rachel Steele Sanjeev Dahal Shawn Shen   "
},
{
	"uri": "/tutorials-4/heatmap/",
	"title": "Heatmap Tutorial",
	"tags": [],
	"description": "",
	"content": "Import and parse data library(tidyr) library(ggplot2) library(reshape2) ## ## Attaching package: \u0026#39;reshape2\u0026#39; ## The following object is masked from \u0026#39;package:tidyr\u0026#39;: ## ## smiths data_path \u0026lt;- \u0026#39;../datasets/john_datasets/traj_0.dat\u0026#39; feature_names = stringr::str_split(readLines(data_path)[1], \u0026#39;--\u0026#39;)[[1]] # feature names have space and special characters. These characters are not good for variable names. # let\u0026#39;s encode feature names names(feature_names) = paste0(\u0026#39;V_\u0026#39;, 1:length(feature_names)) data_raw = read.table(data_path, header = FALSE, sep = \u0026#39; \u0026#39;, comment.char = \u0026#39;D\u0026#39;, stringsAsFactors = FALSE) colnames(data_raw) = names(feature_names) str(data_raw) ## \u0026#39;data.frame\u0026#39;: 5001 obs. of 29 variables: ## $ V_1 : num 0.39 0.391 0.386 0.389 0.39 0.377 0.383 0.391 0.382 0.392 ... ## $ V_2 : num 0.663 0.676 0.683 0.648 0.673 0.702 0.68 0.654 0.632 0.704 ... ## $ V_3 : num 0.931 0.946 0.934 1.001 0.954 ... ## $ V_4 : num 0.854 0.853 0.798 1.158 0.982 ... ## $ V_5 : num 0.373 0.387 0.385 0.374 0.389 0.39 0.386 0.387 0.369 0.381 ... ## $ V_6 : num 0.568 0.583 0.573 0.653 0.579 0.559 0.6 0.568 0.55 0.574 ... ## $ V_7 : num 0.583 0.585 0.54 0.77 0.664 0.563 0.595 0.562 0.541 0.6 ... ## $ V_8 : num 0.392 0.376 0.392 0.382 0.381 0.377 0.383 0.39 0.375 0.386 ... ## $ V_9 : num 0.565 0.533 0.556 0.672 0.543 0.549 0.555 0.569 0.557 0.573 ... ## $ V_10: num 0.375 0.394 0.393 0.386 0.382 0.39 0.386 0.381 0.385 0.376 ... ## $ V_11: num 0.146 0.372 0.03 0.452 -0.282 -0.629 0.189 -0.073 0.001 -0.428 ... ## $ V_12: num -0.989 -0.928 -1 -0.892 -0.959 -0.777 -0.982 -0.997 -1 -0.904 ... ## $ V_13: num 0.663 -0.543 -0.125 0.281 -0.972 0.34 0.032 0.444 0.542 0.046 ... ## $ V_14: num -0.749 -0.84 -0.992 -0.96 0.234 -0.941 -0.999 -0.896 -0.84 -0.999 ... ## $ V_15: num 0.202 -0.191 0.392 -0.356 0.063 0.188 -0.247 0.549 0.207 0.304 ... ## $ V_16: num -0.979 -0.982 -0.92 -0.935 -0.998 -0.982 -0.969 -0.836 -0.978 -0.953 ... ## $ V_17: num -0.752 -0.81 -0.676 -0.726 -0.554 -0.947 -0.885 -0.342 -0.775 -0.893 ... ## $ V_18: num 0.659 0.586 0.737 0.687 0.832 0.322 0.465 0.94 0.631 0.451 ... ## $ V_19: num 0.143 -0.067 0.101 -0.448 0.422 0.199 -0.332 0.233 -0.083 0.318 ... ## $ V_20: num -0.99 -0.998 -0.995 -0.894 -0.907 -0.98 -0.943 -0.973 -0.997 -0.948 ... ## $ V_21: num 0.901 0.977 0.871 0.012 0.984 0.963 0.99 0.812 0.967 0.843 ... ## $ V_22: num -0.434 -0.213 -0.491 -1 -0.176 -0.269 -0.141 -0.583 -0.255 -0.538 ... ## $ V_23: num 0.239 0.451 0.094 0.463 0.137 0.633 -0.017 0.324 -0.027 0.135 ... ## $ V_24: num -0.971 -0.893 -0.996 -0.887 -0.991 -0.774 -1 -0.946 -1 -0.991 ... ## $ V_25: num 0.962 0.996 0.988 -0.652 0.818 0.873 0.996 0.869 0.997 0.982 ... ## $ V_26: num -0.272 0.091 -0.152 0.758 -0.575 -0.487 0.084 -0.495 0.076 -0.19 ... ## $ V_27: num 0.659 0.66 0.68 0.668 0.641 0.65 0.659 0.639 0.65 0.685 ... ## $ V_28: num 0.629 0.426 0.436 0.946 0.407 0.388 0.581 0.684 0.49 0.4 ... ## $ V_29: num 0.414 0.367 0.336 0.39 0.382 0.345 0.419 0.327 0.305 0.351 ... # add frame index data_raw$frame_index = 1:nrow(data_raw)  Cluster data #Set frame index as row names rownames(data_raw) \u0026lt;- data_raw$frame_index data_raw$frame_index \u0026lt;- NULL #ensure NA values omitted data_clean \u0026lt;- na.omit(data_raw) #K-means cluster analysis using 5 clusters fit \u0026lt;- kmeans(data_clean,5) #get cluster means aggregate(data_clean, by=list(fit$cluster), FUN=mean) ## Group.1 V_1 V_2 V_3 V_4 V_5 V_6 ## 1 1 0.3865290 0.5561536 0.5443833 0.6528339 0.3837072 0.5574738 ## 2 2 0.3870317 0.5752425 0.5751743 0.6832726 0.3841506 0.5618320 ## 3 3 0.3862538 0.6787672 0.9178263 0.8797462 0.3833511 0.5726985 ## 4 4 0.3862107 0.5591237 0.5755766 0.6991865 0.3835635 0.5636387 ## 5 5 0.3867178 0.5683006 0.8014479 0.9882086 0.3842270 0.6082822 ## V_7 V_8 V_9 V_10 V_11 V_12 ## 1 0.5546872 0.3846023 0.5709049 0.3839796 0.350702552 -0.9044348 ## 2 0.5696260 0.3843978 0.5705816 0.3845024 0.306719493 -0.9110634 ## 3 0.6291202 0.3842538 0.5725305 0.3836851 -0.188438931 -0.7712672 ## 4 0.5823501 0.3841034 0.5719287 0.3841924 0.231005236 -0.8685295 ## 5 0.8750061 0.3837178 0.5847485 0.3838773 -0.003233129 -0.9398834 ## V_13 V_14 V_15 V_16 V_17 V_18 ## 1 0.43639722 -0.8310204 0.29274478 -0.9250232 0.8213494 -0.5116798 ## 2 -0.86560856 -0.0559065 0.18861331 -0.9371109 0.8281601 -0.4813756 ## 3 0.02844466 -0.7456050 0.11597519 -0.9269046 -0.7416546 0.5897328 ## 4 0.45451047 -0.8125949 0.04439332 -0.9332618 0.8758658 -0.3373410 ## 5 -0.59074847 -0.2259939 0.17629448 0.4362515 0.9034110 -0.2178589 ## V_19 V_20 V_21 V_22 V_23 V_24 ## 1 0.28407053 -0.9418367 0.8058761 -0.5436868 0.1834329 -0.9363295 ## 2 0.05383043 -0.9520143 0.8765832 -0.3730254 0.1732219 -0.9369049 ## 3 0.10945229 -0.9434771 0.8145477 -0.2727290 0.1625840 -0.9381603 ## 4 -0.15486191 -0.9540471 0.9073109 -0.2197906 0.1627094 -0.9459745 ## 5 0.15898773 -0.9357669 0.2634356 0.5613865 0.1036012 -0.9547362 ## V_25 V_26 V_27 V_28 V_29 ## 1 0.7601536 -0.6187944 0.3458882 0.3407378 0.3587986 ## 2 0.8337607 -0.3441680 0.3544802 0.3696593 0.3716466 ## 3 0.7642844 -0.2324141 0.6447195 0.5275057 0.3987672 ## 4 0.8798024 -0.1112788 0.3610766 0.3944915 0.3959699 ## 5 0.5460920 -0.2070429 0.4783558 0.5504233 0.6335583 #append cluster assignment and id data_kmean \u0026lt;- cbind(data_clean, id=seq(nrow(data_clean)), cluster=fit$cluster) #add id sort to order id numbers by cluster data_kmean$idsort \u0026lt;- data_kmean$id[order(data_kmean$cluster)] data_kmean$ idsort \u0026lt;- order(data_kmean$idsort) #reshape2:: melt to make data.frame in long format data_long \u0026lt;- melt(data_kmean, id.vars=c(\u0026quot;id\u0026quot;, \u0026quot;idsort\u0026quot;)) #plot heatmap ggplot(data_long, aes(x=variable, y=idsort)) + geom_tile(aes(fill=value)) #Hierarchical heatmap #Convert clean data to matrix data_matrix \u0026lt;- as.matrix(data_clean) #plot heatmap heatmap(data_matrix)  "
},
{
	"uri": "/tutorials-4/network_plot/",
	"title": "Network Tutorial",
	"tags": [],
	"description": "",
	"content": " pre code, pre, code { white-space: pre !important; overflow-x: scroll !important; word-break: keep-all !important; word-wrap: initial !important; }  Loading libraries library(tidyr) library(ggplot2) library(reshape2) library(GGally) library(network) library(sna) library(scales) library(reshape)  Import and parse data data_path \u0026lt;- \u0026#39;../datasets/john_datasets/traj_0.dat\u0026#39; feature_names = stringr::str_split(readLines(data_path)[1], \u0026#39;--\u0026#39;)[[1]] # feature names have space and special characters. These characters are not good for variable names. # let\u0026#39;s encode feature names names(feature_names) = paste0(\u0026#39;V_\u0026#39;, 1:length(feature_names)) data_raw = read.table(data_path, header = FALSE, sep = \u0026#39; \u0026#39;, comment.char = \u0026#39;D\u0026#39;, stringsAsFactors = FALSE) colnames(data_raw) = names(feature_names) str(data_raw) # add frame index data_raw$frame_index = 1:nrow(data_raw)  Network plot #convert data to adjacency matrix #lookup table from feature to frame index feature_to_frame \u0026lt;- data_raw$frame_index names(feature_to_frame) \u0026lt;- data_raw$V_1 #normalize data_melt \u0026lt;- melt(data_raw, id=c(\u0026quot;frame_index\u0026quot;, \u0026quot;V_1\u0026quot;)) #remap feature to frame index map \u0026lt;- data.frame(src=data_melt$frame_index, dest=feature_to_frame[as.character(data_melt$value)]) #convert to adjacency matrix adj_matrix \u0026lt;- xtabs(~ src + dest, map) #convert xtabs format to matrix attr(adj_matrix, \u0026quot;class\u0026quot;) \u0026lt;- NULL attr(adj_matrix, \u0026quot;call\u0026quot;) \u0026lt;- NULL #convert matrix to data.frame df_adj\u0026lt;- as.data.frame(adj_matrix) #These formats (xtabs, matrix, and data.frame) don\u0026#39;t seem to be working with ggnet2 #will keep on trying to troubleshoot later ggnet2(df_adj)  "
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]