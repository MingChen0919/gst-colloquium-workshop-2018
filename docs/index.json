[
{
	"uri": "/rstudio-accounts/",
	"title": "RStudio Accounts",
	"tags": [],
	"description": "",
	"content": " pre code, pre, code { white-space: pre !important; overflow-x: scroll !important; word-break: keep-all !important; word-wrap: initial !important; }  Workshop Environment RStudio Server Account\nFind your name in this google sheet and use the associated username and password to login to this RStudio Server.\nRunning a docker container locally\nThanks to the machine learning workshop from last week! Everyone should have had docker installed. If you are interestd in running a local RStudio server. You can use the command below:\ndocker pull mingchen0919/gst-dv-rstudio docker run --name=gst_dv -d -p 80:8787 mingchen0919/gst-dv-rstudio You RStudio server should be available at http://127.0.0.1.\nInstall packages In case that you want to add your own packages, you can use the code below to install R packages in the RStudio server.\ndir.create(\u0026#39;~/my-r-lib\u0026#39;) .libPaths(\u0026#39;~/my-r-lib\u0026#39;) install.packages(\u0026#39;ggplot2\u0026#39;)   Build Workshop Environment If you are interested in how we set up the RStudio on the jetstream cloud computing environment, below is the instruction.\nRStudio Docker on Jetstream Launch a Jetstream image with Docker installed on Jetstream. Then run the following to luanch an RStudio server.\nsudo su # docker pull rocker/rstudio # docker run --name=gst_dv -d -p 80:8787 rocker/rstudio docker pull mingchen0919/gst-dv-rstudio docker run --name=gst_dv -d -p 80:8787 mingchen0919/gst-dv-rstudio  Create 30 new users # login to the rstudio container docker exec -it gst_dv bash # create users in the rstudio container for id in $(seq 1 30) do echo \u0026quot;gst_user_${id}:passwd_user_${id}::::/home/gst_user_${id}:\u0026quot; | newusers done   "
},
{
	"uri": "/tutorials/ggplot2-template/",
	"title": "ggplot2 plotting template",
	"tags": [],
	"description": "",
	"content": " pre code, pre, code { white-space: pre !important; overflow-x: scroll !important; word-break: keep-all !important; word-wrap: initial !important; } .lleft { text-align: left; float: left; width:50%; z-index:-10; border: 5px solid #fff; }  Get practice file Run the following code to get the practice file into your working directory.\ndownload.file(\u0026#39;https://raw.githubusercontent.com/MingChen0919/gst-colloquium-workshop-2018/update-ggplot-template-tutorial/misc/ggplot2-template-practice.Rmd\u0026#39;, destfile = \u0026#39;ggplot2-template-practice.Rmd\u0026#39;)  Example data The data was extracted from the 1974 Motor Trend US magazine, and comprises fuel consumption and 10 aspects of automobile design and performance for 32 automobiles (1973–74 models).\n## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160.0 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160.0 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108.0 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258.0 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360.0 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225.0 105 2.76 3.460 20.22 1 0 3 1 ## Duster 360 14.3 8 360.0 245 3.21 3.570 15.84 0 0 3 4 ## Merc 240D 24.4 4 146.7 62 3.69 3.190 20.00 1 0 4 2 ## Merc 230 22.8 4 140.8 95 3.92 3.150 22.90 1 0 4 2 ## Merc 280 19.2 6 167.6 123 3.92 3.440 18.30 1 0 4 4 ## Merc 280C 17.8 6 167.6 123 3.92 3.440 18.90 1 0 4 4 ## Merc 450SE 16.4 8 275.8 180 3.07 4.070 17.40 0 0 3 3 ## Merc 450SL 17.3 8 275.8 180 3.07 3.730 17.60 0 0 3 3 ## Merc 450SLC 15.2 8 275.8 180 3.07 3.780 18.00 0 0 3 3 ## Cadillac Fleetwood 10.4 8 472.0 205 2.93 5.250 17.98 0 0 3 4 ## Lincoln Continental 10.4 8 460.0 215 3.00 5.424 17.82 0 0 3 4 ## Chrysler Imperial 14.7 8 440.0 230 3.23 5.345 17.42 0 0 3 4 ## Fiat 128 32.4 4 78.7 66 4.08 2.200 19.47 1 1 4 1 ## Honda Civic 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2 ## Toyota Corolla 33.9 4 71.1 65 4.22 1.835 19.90 1 1 4 1 ## Toyota Corona 21.5 4 120.1 97 3.70 2.465 20.01 1 0 3 1 ## Dodge Challenger 15.5 8 318.0 150 2.76 3.520 16.87 0 0 3 2 ## AMC Javelin 15.2 8 304.0 150 3.15 3.435 17.30 0 0 3 2 ## Camaro Z28 13.3 8 350.0 245 3.73 3.840 15.41 0 0 3 4 ## Pontiac Firebird 19.2 8 400.0 175 3.08 3.845 17.05 0 0 3 2 ## Fiat X1-9 27.3 4 79.0 66 4.08 1.935 18.90 1 1 4 1 ## Porsche 914-2 26.0 4 120.3 91 4.43 2.140 16.70 0 1 5 2 ## Lotus Europa 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2 ## Ford Pantera L 15.8 8 351.0 264 4.22 3.170 14.50 0 1 5 4 ## Ferrari Dino 19.7 6 145.0 175 3.62 2.770 15.50 0 1 5 6 ## Maserati Bora 15.0 8 301.0 335 3.54 3.570 14.60 0 1 5 8 ## Volvo 142E 21.4 4 121.0 109 4.11 2.780 18.60 1 1 4 2 help(mtcars) Basic data frame manipulation\nhead(mtcars) ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 mtcars[1:5, ] ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 mtcars[, 2:4] ## cyl disp hp ## Mazda RX4 6 160.0 110 ## Mazda RX4 Wag 6 160.0 110 ## Datsun 710 4 108.0 93 ## Hornet 4 Drive 6 258.0 110 ## Hornet Sportabout 8 360.0 175 ## Valiant 6 225.0 105 ## Duster 360 8 360.0 245 ## Merc 240D 4 146.7 62 ## Merc 230 4 140.8 95 ## Merc 280 6 167.6 123 ## Merc 280C 6 167.6 123 ## Merc 450SE 8 275.8 180 ## Merc 450SL 8 275.8 180 ## Merc 450SLC 8 275.8 180 ## Cadillac Fleetwood 8 472.0 205 ## Lincoln Continental 8 460.0 215 ## Chrysler Imperial 8 440.0 230 ## Fiat 128 4 78.7 66 ## Honda Civic 4 75.7 52 ## Toyota Corolla 4 71.1 65 ## Toyota Corona 4 120.1 97 ## Dodge Challenger 8 318.0 150 ## AMC Javelin 8 304.0 150 ## Camaro Z28 8 350.0 245 ## Pontiac Firebird 8 400.0 175 ## Fiat X1-9 4 79.0 66 ## Porsche 914-2 4 120.3 91 ## Lotus Europa 4 95.1 113 ## Ford Pantera L 8 351.0 264 ## Ferrari Dino 6 145.0 175 ## Maserati Bora 8 301.0 335 ## Volvo 142E 4 121.0 109 mtcars$mpg ## [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7 15.0 21.4  Plotting template   GEOM_FUNCTION: use a geometric object to represent your data.  MAPPINGS: associate data values with visual values. e.g., categorial data -\u0026gt; different colors. STAT: use raw data values or calculate new values from raw values. POSITION: adjust overlapped geometric objects.  COORDINATE_FUNCTION: type of coordinate systems. FACET_FUNCTION: divide plots into subplots SCALE_FUNCTION: how data values are mapped to visual values. THEME_FUNCTION: the apperance of graph components that is not directly related to the mappings.   GEOM_FUNCTION Specify a geometric object to represent your data     Mappings From data values to visual values   Stat transform your data, then map the transformed data values to visual values.   COORDINATE SYSTEM  Facet Split data into multiple plots.   Scale Control how data values are mapped to visual values and the mapping related attributes.   Theme The general appearance   Exercise Complete the code in the Exercise section in the ggplot2-template-practice.Rmd file to generate the exact same plot as below.\nTwo variables you are looking for: * TIC0 from data energy_tics * PHE_5_CA_77_LYS_15_CA_241 from data trajectory\n "
},
{
	"uri": "/datasets/",
	"title": "Datasets",
	"tags": [],
	"description": "",
	"content": " pre code, pre, code { white-space: pre !important; overflow-x: scroll !important; word-break: keep-all !important; word-wrap: initial !important; }  MD Features Trajectory  Features Trajectory in trajectory The data format has 1 row per frame with N entries, and n rows  trajectory[1:5, 1:3] ## index MET_1_CA_1_LYS_2_CA_20 MET_1_CA_1_VAL_3_CA_42 ## 1 1 0.398 0.548 ## 2 2 0.390 0.679 ## 3 3 0.382 0.644 ## 4 4 0.380 0.644 ## 5 5 0.384 0.713  Energy \u0026amp; TIC trajectory  Use TICs as collective variables  Projection of a frame (741 features) onto each of d (a few) TIC (741x1 vector) Reduces dimensionality 741→d of data Capture informative (kinetic) data variation   head(energy_tics[, 1:4]) ## index Energy TIC0 TIC1 ## V1 1 7.871257 2.922333 0.3859920 ## V2 2 10.104849 3.100774 -5.1799932 ## V3 3 8.718554 3.210950 0.2636769 ## V4 4 8.158938 3.081216 1.1849713 ## V5 5 7.836165 3.076878 0.9235936 ## V6 6 11.203462 1.934757 -1.8534638  Microstate \u0026amp; Macrostate Trajectory:  Microstate After k-means clustering with k=1000  Each frame belongs to a cluster, ie microstate Used TIC coordinate space (12 CVs)  Macrostate A Markov State Model was made first  Coarse-graining of microstates Each frame now belongs to a macrostate Used PCCA + manual   head(energy_tics[, 5:6]) ## microstate macrostate ## V1 568 10 ## V2 381 10 ## V3 562 10 ## V4 674 10 ## V5 158 10 ## V6 809 9  Markov State Transition Matrix  MSM: transition probability between (micro)states\n Depends only on current state Made by sliding window approach Count microstate transitions from each i to each j, this ‘count’ matrix is the MSM  Normalize counts: Probability of moving from state i to state j: \\(t_{i,j}\\)\n \\(t_{i,j=i}\\) : probability of staying in i \\(t_{i,j \\neq i}\\) : probability of jumping to j   protein_transition[1:5, 1:5] ## V1 V2 V3 V4 V5 ## V1 0.07920792 0.09323724 0.18545740 4.348727e-02 0.179138030 ## V2 0.05704529 0.09698997 0.16629116 9.775648e-02 0.216936596 ## V3 0.08818754 0.12924145 0.01627907 0.000000e+00 0.020733824 ## V4 0.02936698 0.10789771 0.00000000 1.776357e-15 0.004963047 ## V5 0.08188568 0.16207745 0.01993134 3.359475e-03 0.118446601  Stationary Distribution  Equilibrium Population of States  First eigenvector of MSM transition matrix Next eigenvectors are the kinetic processes First eigenvector is 1 Next eigenvectors correspond to rates   head(stationary_distribution) ## index microstate macrostate ## 1 1 5.574649e-05 0.03783952 ## 2 2 3.684676e-05 0.03840065 ## 3 3 1.239387e-04 0.04356346 ## 4 4 7.866115e-05 0.04672588 ## 5 5 4.689120e-05 0.05138941 ## 6 6 5.496584e-05 0.04788733  "
},
{
	"uri": "/tutorials/scatterplot/",
	"title": "Scatterplot",
	"tags": [],
	"description": "",
	"content": " pre code, pre, code { white-space: pre !important; overflow-x: scroll !important; word-break: keep-all !important; word-wrap: initial !important; }  Import Data #---Loading data---# load(url(\u0026#39;https://github.com/MingChen0919/gst-colloquium-workshop-2018/raw/master/content/datasets/datasets.RData\u0026#39;))  Load ggplot2 library #---loading ggplot library---# library(ggplot2)  Visualization Plot One; collective variables and macrostates  Geom object: point  TIC-0 -\u0026gt; x TIC-1 -\u0026gt; y Macrostate -\u0026gt; color   #---plot one---# ggplot(energy_tics) + geom_point(mapping = aes(x = TIC0, y = TIC1, color = as.factor(macrostate)), stat = \u0026quot;identity\u0026quot;, position = \u0026quot;identity\u0026quot;) + coord_cartesian() + facet_null() + ##----map data values to visual values---## scale_x_continuous() + scale_y_continuous() + scale_color_identity() + theme()  Plot Two; manipulating axes, point colors  Geom object: point  TIC-0 -\u0026gt; x TIC-1 -\u0026gt; y Macrostate -\u0026gt; color  Plot edits  Set the axis labels (breaks)\n Set the axis limits (limits)\n Change axis orientation (trans = “reverse”)\n Change colors for macrostates (scale_color_manual())\n Set labels for macrostates (breaks; labels)\n Change theme (theme_classic())   #---plot two---# ggplot(energy_tics) + geom_point(mapping = aes(x = TIC0, y = TIC1, color = as.factor(macrostate)), stat = \u0026quot;identity\u0026quot;, position = \u0026quot;identity\u0026quot;) + coord_cartesian() + facet_null() + ##----map data values to visual values---## scale_x_continuous(name = \u0026quot;TIC-0\u0026quot;, breaks = c(-1, 0, 1, 2, 3, 4, 5, 6, 7), limits = c(-1, 7)) + scale_y_continuous(name = \u0026quot;TIC-1\u0026quot;, breaks = -7:3, trans = \u0026quot;reverse\u0026quot;, limits = c(3, -7)) + scale_color_manual(values = c(\u0026quot;1\u0026quot; = \u0026quot;red\u0026quot;, \u0026quot;2\u0026quot; = \u0026quot;blue\u0026quot;, \u0026quot;3\u0026quot; = \u0026quot;yellow\u0026quot;, \u0026quot;4\u0026quot; = \u0026quot;green\u0026quot;), name = \u0026quot;Macrostate\u0026quot;, breaks = c(1,2,3,4), labels = c(\u0026#39;state 1\u0026#39;, \u0026#39;state 2\u0026#39;, \u0026#39;state 3\u0026#39;, \u0026#39;state 4\u0026#39;)) + theme_classic()  Plot Three; add additional factor to visualize  Geom object: point  TIC-0 -\u0026gt; x TIC-1 -\u0026gt; y Macrostate -\u0026gt; shape Energy -\u0026gt; color  Plot edits  Energy added as parameter Change macrostate label   #---plot three---# ggplot(energy_tics) + geom_point(mapping = aes(x = TIC0, y = TIC1, shape = as.factor(macrostate), color = Energy), stat = \u0026quot;identity\u0026quot;, position = \u0026quot;identity\u0026quot;) + coord_cartesian() + facet_null() + ##----map data values to visual values---## scale_x_continuous() + scale_y_continuous() + scale_color_gradient() + scale_shape_discrete() + theme() + ##---change macrostate legend label---## labs(shape=\u0026quot;Macrostate\u0026quot;)   Plot Four; manipulate color gradients, specify point shapes  Geom object: point  TIC-0 -\u0026gt; x TIC-1 -\u0026gt; y Macrostate -\u0026gt; shape Energy -\u0026gt; color  Plot edits  Change color gradient for energy (scale_color_gradient) Specify shapes for macrostates   #---plot four---# ggplot(energy_tics) + geom_point(mapping = aes(x = TIC0, y = TIC1, shape = as.factor(macrostate), color = Energy), stat = \u0026quot;identity\u0026quot;, position = \u0026quot;identity\u0026quot;) + coord_cartesian() + facet_null() + ##----map data values to visual values---## scale_x_continuous(name = \u0026quot;TIC-0\u0026quot;, breaks = -1:8) + scale_y_continuous(name = \u0026quot;TIC-1\u0026quot;, breaks = -6:3) + scale_color_gradient(low=\u0026quot;blue\u0026quot;, high=\u0026quot;red\u0026quot;, breaks = 0:8) + scale_shape_manual(values = c(\u0026quot;1\u0026quot; = 15, \u0026quot;2\u0026quot; = 17, \u0026quot;3\u0026quot; = 19, \u0026quot;4\u0026quot; = 22), name = \u0026quot;Macrostate\u0026quot;) + theme_classic()  Plot Five; add confidence ellipses  Geom object: point  TIC-0 -\u0026gt; x TIC-1 -\u0026gt; y Macrostate -\u0026gt; shape Energy -\u0026gt; color  Geom object: path  TIC-0 -\u0026gt; x TIC-1 -\u0026gt; y Macrostate -\u0026gt; color confidence ellipse -\u0026gt; stat  Plot edits  Change legend labels (labs())   #---plot five---# ggplot(energy_tics) + geom_point(mapping = aes(x = TIC0, y = TIC1, fill = Energy, shape = as.factor(macrostate)), stat = \u0026quot;identity\u0026quot;, position = \u0026quot;identity\u0026quot;, inherit.aes = FALSE) + geom_path(mapping = aes(x = TIC0, y = TIC1, color = as.factor(macrostate)), stat = \u0026quot;ellipse\u0026quot;, inherit.aes = FALSE) + coord_cartesian() + facet_null() + ##----map data values to visual values---## scale_x_continuous(name = \u0026quot;TIC-0\u0026quot;, breaks = -1:8) + scale_y_continuous(name = \u0026quot;TIC-1\u0026quot;, breaks = -6:3) + scale_shape_manual(values = c(\u0026quot;1\u0026quot; = 22, \u0026quot;2\u0026quot; = 24, \u0026quot;3\u0026quot; = 23, \u0026quot;4\u0026quot; = 25)) + scale_fill_gradient(low = \u0026quot;blue\u0026quot;, high = \u0026quot;red\u0026quot;) + scale_color_discrete() + theme_classic() + ##---change macrostate legend label---## labs(shape=\u0026quot;Macrostate\u0026quot;, color = \u0026quot;Macrostate\u0026quot;)    "
},
{
	"uri": "/tutorials/network/",
	"title": "Heatmap and Network",
	"tags": [],
	"description": "",
	"content": " pre code, pre, code { white-space: pre !important; overflow-x: scroll !important; word-break: keep-all !important; word-wrap: initial !important; }  Load packages, set up working environment. If the packages cannot be found, please install first using install.packages() command.\nlibrary(ggnetwork) library(sna) library(reshape2) library(ggplot2)  The “ggnetwork”\u0026quot; package provides a way to build network plots with ggplot2. The “sna” package contains a range of tools for social network analysis, including node and graph-level indices, structural distance and covariance methods, structural equivalence detection, network regression, random graph generation, and 2D/3D network visualization.   Import data protein_transition \u0026lt;- read.table(url(\u0026#39;https://raw.githubusercontent.com/MingChen0919/gst-colloquium-workshop-2018/master/content/datasets/John_datasets/protein_folder/transitionmatrix.microstates.dat\u0026#39;)) Now, take a look at the data we just imported. Click Environment on the right board, and then click the transistion. If you are command line geek, you can also type View(protein_transition) in console.\n Plotting heatmap First, I will help you to do some data transformation and reshaping.\n# Change data into a matrix with same row names and column names. row.names(protein_transition) \u0026lt;- colnames(protein_transition) transition_mat \u0026lt;- as.matrix(protein_transition) melt_mat \u0026lt;- melt(transition_mat) Now, use ggplot2 to make a heatmap using the ‘melt_mat’ data.\nggplot(data = melt_mat) + geom_tile(mapping = aes(x=Var1, y=Var2, fill=value)) + scale_fill_gradient(name= \u0026quot;transition\u0026quot;) + theme_void() #ggsave(\u0026quot;protein_heatmap.png\u0026quot;) Think about how you can make the heatmap look better?  using log values change scale colors anything else?  Practice: try to make your heatmap looks better. (5 min)    Simple network We can also use the transition data to make network plots. First, an example of a messy network figure using only transition data values. (You don’t have to try this)\nn = network(protein_transition) n1 = ggnetwork(n) n1$x = n1$x[, 1] n1$y = n1$y[, 1] n1$xend = n1$xend[, 1] n1$yend = n1$yend[, 1] ggplot(n1, aes(x = x, y = y, xend = xend, yend = yend)) + geom_nodes() + geom_edges() + theme_blank()  Informative network Add attributes to vertices Assign an weight levels to each vertex.\n Assign macrostate groups to vertex.\n Visualize transition, macrostate and weight information in one figure.\n  macrostate = read.table(url(\u0026#39;https://raw.githubusercontent.com/MingChen0919/gst-colloquium-workshop-2018/master/content/datasets/John_datasets/protein_folder/macrostate.map.dat\u0026#39;)) distribution = read.table(url(\u0026#39;https://raw.githubusercontent.com/MingChen0919/gst-colloquium-workshop-2018/master/content/datasets/John_datasets/protein_folder/stationarydistribution.microstates.dat\u0026#39;)) distribution$weight \u0026lt;- as.numeric(cut(distribution$V1, 6)) n %v% \u0026quot;weight\u0026quot; = distribution[,2] n %v% \u0026quot;macrostate\u0026quot; = macrostate[,1] n2 = ggnetwork(n) n2$x = n2$x[, 1] n2$y = n2$y[, 1] n2$xend = n2$xend[, 1] n2$yend = n2$yend[, 1] ggplot(n2, mapping = aes(x = x, y = y, xend = xend, yend = yend)) + geom_nodes(mapping = aes(color = macrostate, size = weight)) + geom_edges() + theme_blank()   Modify the basic network To change the transprancy of edges.\nggplot(n2, mapping = aes(x = x, y = y, xend = xend, yend = yend)) + geom_nodes(mapping = aes(color = macrostate, size = weight)) + geom_edges(alpha = 0.01) + theme_blank() #ggsave(\u0026quot;network.png\u0026quot;)  A macrostate network Instead of using the microstate transition, we process it into macrostates and using the new macrostate transition and distrubution.\nmacro_transition \u0026lt;- read.table(url(\u0026quot;https://raw.githubusercontent.com/MingChen0919/gst-colloquium-workshop-2018/master/content/datasets/John_datasets/protein_folder/transitionmatrix.macrostates.dat\u0026quot;)) macro_distrubution \u0026lt;- read.table(url(\u0026quot;https://raw.githubusercontent.com/MingChen0919/gst-colloquium-workshop-2018/master/content/datasets/John_datasets/protein_folder/stationarydistribution.macrostates.dat\u0026quot;)) n= network(macro_transition) n %v% \u0026quot;weight\u0026quot; = macro_distrubution[,1] n2 = ggnetwork(n) n2$x = n2$x[, 1] n2$y = n2$y[, 1] n2$xend = n2$xend[, 1] n2$yend = n2$yend[, 1] n2$macrostat = gsub(\u0026quot;V\u0026quot;,\u0026quot;\u0026quot;,n2$vertex.names) n2$macrostat = as.numeric(n2$macrostat) ggplot(n2, mapping = aes(x = x, y = y, xend = xend, yend = yend)) + geom_nodes(mapping = aes(size = macrostat, color=vertex.names)) + geom_edges(alpha = 0.3) + theme_blank()  Excercise (5 min) change curvature in the geom_edges() change the line width cooresponding to the weight. (Hint: add mapping = aes(size = weight) in the geom_edges()) now run ggplot again and see what changes!    Add labels to nodes (Optional) We will not include this part in our workshop, please try it yourself if you are interested in and would like to use this type of plot in your research.\nggplot(n2, mapping = aes(x = x, y = y, xend = xend, yend = yend)) + geom_edges(alpha = 0.3) + geom_nodelabel(aes(label = vertex.names, color = as.factor(weight)), cex = 2, fontface = \u0026quot;bold\u0026quot;) + scale_color_manual(name = \u0026quot;Weight\u0026quot;, values = colorRampPalette(c(\u0026quot;yellow\u0026quot;, \u0026quot;red\u0026quot;))(12)) + theme_blank()  "
},
{
	"uri": "/tutorials/",
	"title": "Data Visualization",
	"tags": [],
	"description": "",
	"content": " pre code, pre, code { white-space: pre !important; overflow-x: scroll !important; word-break: keep-all !important; word-wrap: initial !important; }  GGPLOT2 plotting template  Scatterplot  Network for graph-like data  "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/",
	"title": "Data Visualization",
	"tags": [],
	"description": "",
	"content": "GST Data Visualization Team  Amanda Devolk Karthik Varanasi Jennifer Bourn Jiali Yu John Ossyra Ming Chen Pawat Pattarawat Rachel Steele Sanjeev Dahal Shawn Shen   "
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]